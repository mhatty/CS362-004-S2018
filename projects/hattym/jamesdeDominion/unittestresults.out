Start UpdateCoins Unit Tests 
-------------------------------------------
UpdateCoins Test 1: Player 1 hand(1 copper, 2 silver, 2 gold) + 0 bonus = 11 coins
Actual Player coins: 11
Test Passed!
-------------------------------------------
UpdateCoins Test 2: Player 1 hand(5 gardens) + 5 bonus = 5 coins
Actual Player coins: 5
Test Passed!
-------------------------------------------
Start gainCard Unit Tests 
-------------------------------------------
gainCard Test 1: Try to gain a card that is not part of the game.
Hand Count is unchanged:
Starting Hand Count: 5
Ending Hand Count: 5
Return Value == -1:
Return Value: -1
Test Passed!
-------------------------------------------
gainCard Test 2: Gain card to deck.
Deck count increases by 1:
Starting Deck Count: 5
Ending Deck Count: 6
Last Deck Card is added Card:
Card Added: enum value 9
Last Added: enum value 9
Test Passed!
-------------------------------------------
gainCard Test 3: Gain card to player's hand.
Hand count increases by 1:
Starting Hand Count: 5
Ending Hand Count: 6
Last Hand Card is added Card:
Card Added: enum value 9
Last Added: enum value 9
Test Passed!
-------------------------------------------
gainCard Test 4: Gain card to discard pile
Discard count increases by 1:
Starting Discard Count: 0
Ending Discard Count: 1
Last Discarded Card is added Card:
Card Added: enum value 9
Last Discarded: enum value 9
Test Passed!
-------------------------------------------
Start isGameOver Unit Tests 
-------------------------------------------
isGameOver Test 1: Providence Card supply is empty
Expected Result: Return value == 1
Providence Card Supply: 0
Return Value: 1
Test Passed!
-------------------------------------------
isGameOver Test 2: 3 Supply piles are empty
Expected Result: Return value == 1
Gold Card Supply: 0
Silver Card Supply: 0
Copper Card Supply: 0
Return Value: 1
Test Passed!
-------------------------------------------
isGameOver Test 3: Game has just started
Expected Result: Return value == 0
Providence Card Supply: 8
Gold Card Supply: 30
Silver Card Supply: 40
Copper Card Supply: 46
Return Value: 0
Test Passed!
-------------------------------------------
Start buyCard Unit Tests 
-------------------------------------------
buyCard Test 1: Number of buys < 1
Expected Result: Function returns -1, state variables unchanged
Card Cost: 6
Coins Before Buy: 10
Coins After Buy: 10
Cards in discard before Buy: 0
Cards in discard after Buy: 0
Card Supply Before Buy: 30
Card Supply After Buy: 30
Number of Buys Before Buy: 0
Number of Buys After Buy: 0
Return Value: -1
Test Passed!
-------------------------------------------
buyCard Test 2: supply count = 0
Expected Result: Function returns -1, state variables unchanged
Card Cost: 6
Coins Before Buy: 10
Coins After Buy: 10
Cards in discard before Buy: 0
Cards in discard after Buy: 0
Card Supply Before Buy: 0
Card Supply After Buy: 0
Number of Buys Before Buy: 1
Number of Buys After Buy: 1
Return Value: -1
Test Passed!
-------------------------------------------
buyCard Test 3: Not Enough Coins < 1
Expected Result: Function returns -1, state variables unchanged
Card Cost: 6
Coins Before Buy: 0
Coins After Buy: 0
Cards in discard before Buy: 0
Cards in discard after Buy: 0
Card Supply Before Buy: 30
Card Supply After Buy: 30
Number of Buys Before Buy: 1
Number of Buys After Buy: 1
Return Value: -1
Test Passed!
-------------------------------------------
buyCard Test 3: Successfully Buy CardExpected Result: Function returns 0, Coins Decrease by 6, 
Number of Buys Decreases by 1, Supply Count Decreases by 1, Discard Count increases by 1
Card Cost: 6
Coins Before Buy: 10
Coins After Buy: 4
Cards in discard before Buy: 0
Cards in discard after Buy: 1
Card Supply Before Buy: 30
Card Supply After Buy: 29
Number of Buys Before Buy: 1
Number of Buys After Buy: 0
Return Value: 0
Test Passed!
-------------------------------------------
Start Smithy Card Unit Tests 
-------------------------------------------
Smithy Test 1: Hand Contains +2 Cards Overall
Cards in Hand before Smithy: 5
Cards in Hand after Smithy: 9
Test Failed!
-------------------------------------------
Smithy Test 2: Played Cards Contains +1 Cards Overall
Cards in Played Cards before Smithy: 0
Cards in Played Cards after Smithy: 1
Test Passed!
-------------------------------------------
Smithy Test 3: Deck Contains 3 Less Cards Overall
Cards in Deck before Smithy: 5
Cards in Deck after Smithy: 0
Test Failed!
-------------------------------------------
Start Adventurer Card Unit Tests 
-------------------------------------------
First Test Set: Top 2 Deck Cards Are Treasures
Adventurer Test 1: Hand Contains +1 Cards Overall
Cards in Hand before Adventurer: 5
Cards in Hand after Adventurer: 8
Test Failed!
-------------------------------------------
Adventurer Test 2: Played Cards Contains +1 Cards Overall
Cards in Played Cards before Adventurer: 0
Cards in Played Cards after Adventurer: 0
Test Failed!
-------------------------------------------
Adventurer Test 3: Deck Contains 2 Less Cards Overall
Cards in Deck before Adventurer: 5
Cards in Deck after Adventurer: 1
Test Failed!
-------------------------------------------
Adventurer Test 4: Discard Pile is Unchanged 
Cards in Discard Pile before Adventurer: 0
Cards in Discard Pile after Adventurer: 1
Test Failed!
-------------------------------------------
Second Test Set: 2 Cards drawn before any treasurers drawn 
Adventurer Test 5: Hand Contains +1 Cards Overall
Cards in Hand before Adventurer: 5
Cards in Hand after Adventurer: 7
Test Failed!
-------------------------------------------
Adventurer Test 6: Played Cards Contains +1 Cards Overall
Cards in Played Cards before Adventurer: 0
Cards in Played Cards after Adventurer: 0
Test Failed!
-------------------------------------------
Adventurer Test 7: Deck Contains 4 Less Cards Overall
Cards in Deck before Adventurer: 5
Cards in Deck after Adventurer: 0
Test Failed!
-------------------------------------------
Adventurer Test 8: Discard Pile contains +2 Cards Overall 
Cards in Discard Pile before Adventurer: 0
Cards in Discard Pile after Adventurer: 3
Test Failed!
-------------------------------------------
Start Council Room Card Unit Tests 
-------------------------------------------
First Test Set: Player 1's Turn
Council Room Test 1: Player 1 Hand Contains +3 Cards Overall
Cards in Hand before Council Room: 5
Cards in Hand after Council Room: 9
Test Failed!
-------------------------------------------
Council Room Test 2: Player 1's Played Cards Contains +1 Cards Overall
Cards in Played Cards before Council Room: 0
Cards in Played Cards after Council Room: 1
Test Passed!
-------------------------------------------
Council Room Test 3: Player 1's Deck Contains 4 Less Cards Overall
Cards in Deck before Council Room: 5
Cards in Deck after Council Room: 0
Test Failed!
-------------------------------------------
Council Room Test 4: Player 1's number of buys increased by 1
Number of Buys before Council Room: 1
Number of Buys after Council Room: 2
Test Passed!
-------------------------------------------
Council Room Test 5: Player 2's Hand Contains +1 Cards Overall
Cards in Hand before Council Room: 0
Cards in Hand after Council Room: 1
Test Passed!
-------------------------------------------
Council Room Test 6: Player 2's Deck Contains 1 Less Cards Overall
Cards in Deck before Council Room: 10
Cards in Deck after Council Room: 9
Test Passed!
-------------------------------------------
First Test Set: Player 2's Turn
Council Room Test 6: Player 2's Hand Contains +3 Cards Overall
Cards in Hand before Council Room: 0
Cards in Hand after Council Room: 4
Test Failed!
-------------------------------------------
Council Room Test 7: Player 2's Played Cards Contains +1 Cards Overall
Cards in Played Cards before Council Room: 0
Cards in Played Cards after Council Room: 1
Test Passed!
-------------------------------------------
Council Room Test 8: Player 2's Deck Contains 4 Less Cards Overall
Cards in Deck before Council Room: 10
Cards in Deck after Council Room: 5
Test Failed!
-------------------------------------------
Council Room Test 9: Player 2's number of buys increased by 1
Number of Buys before Council Room: 1
Number of Buys after Council Room: 2
Test Passed!
-------------------------------------------
Council Room Test 10: Player 1's Hand Contains +1 Cards Overall
Cards in Hand before Council Room: 5
Cards in Hand after Council Room: 6
Test Passed!
-------------------------------------------
Council Room Test 11: Player 1's Deck Contains 1 Less Cards Overall
Cards in Deck before Council Room: 5
Cards in Deck after Council Room: 4
Test Passed!
-------------------------------------------
Start Remodel Card Unit Tests 
-------------------------------------------
First Test Set: Gained Card Cost > +2 Trashed Card
Remodel Test 1: Hand Contains Same Number of Cards Cards
Cards in Hand before Remodel: 5
Cards in Hand after Remodel: 3
Test Failed!
-------------------------------------------
Remodel Test 2: Played Cards Contains Same Number of Cards Overall
Cards in Played Cards before Remodel: 0
Cards in Played Cards after Remodel: 2
Test Failed!
-------------------------------------------
Remodel Test 3: Deck Contains Same Number of Cards Overall
Cards in Deck before Remodel: 5
Cards in Deck after Remodel: 5
Test Passed!
-------------------------------------------
Remodel Test 4: Discard Pile Contains Same Number of Cards Overall
Cards in Discard Pile before Remodel: 0
Cards in Discard Pile after Remodel: 1
Test Failed!
-------------------------------------------
Remodel Test 5: Duchy Supply Contains Same Number of Cards Overall
Cards in Duchy Supply Pile before Remodel: 8
Cards in Duchy Supply Pile after Remodel: 8
Test Passed!
-------------------------------------------
Second Test Set: Gained Card Cost < 2 + Trashed Card Value
Remodel Test 6: Hand Contains 2 Less Cards Cards
Cards in Hand before Remodel: 5
Cards in Hand after Remodel: 3
Test Passed!
-------------------------------------------
Remodel Test 7: Played Cards Contains +1 Card Overall
Cards in Played Cards before Remodel: 0
Cards in Played Cards after Remodel: 2
Test Failed!
-------------------------------------------
Remodel Test 8: Deck Contains Same Number of Cards Overall
Cards in Deck before Remodel: 5
Cards in Deck after Remodel: 5
Test Passed!
-------------------------------------------
Remodel Test 9: Discard Pile Contains +1 Card Overall
Cards in Discard Pile before Remodel: 0
Cards in Discard Pile after Remodel: 1
Test Passed!
-------------------------------------------
Remodel Test 10: Duchy Supply Contains 1 Less Card Overall
Cards in Duchy Supply Pile before Remodel: 8
Cards in Duchy Supply Pile after Remodel: 7
Test Passed!
-------------------------------------------
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:23.33% of 30
Branches executed:100.00% of 28
Taken at least once:17.86% of 28
No calls

Function 'adventurerCard'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'smithyCard'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'council_roomCard'
Lines executed:100.00% of 10
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'villageCard'
Lines executed:0.00% of 4
No branches
No calls

Function 'embargoCard'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'cardEffect'
Lines executed:10.08% of 258
Branches executed:16.38% of 177
Taken at least once:5.65% of 177
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

File 'dominion.c'
Lines executed:37.08% of 650
Branches executed:41.49% of 417
Taken at least once:28.06% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 224 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      224:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      224:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       80:   12:    return -1;
      144:   13:  return 0;
      224:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1520:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      800:   65:        }
       80:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     2640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      152:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
       16:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       16:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1160:  130:	}
        -:  131:
      160:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
       48:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
      112:  150:	}
       16:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       16:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       16:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
      216:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       40:  193:    drawCard(state->whoseTurn, state);
       40:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        8:  199:}
        -:  200:
function shuffle called 18 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
branch  0 taken 11%
branch  1 taken 89%
        2:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      352:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
     1152:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28%
      416:  219:      state->deck[player][i] = state->deck[player][i+1];
      416:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      352:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
      160:  226:  }
        -:  227:
       16:  228:  return 0;
       18:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25%
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 33%
branch  1 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 50%
branch  1 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        4:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       10:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 7 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
        7:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:	{
        3:  406:	  j++;
        3:  407:	}
       50:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        3:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 67 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       67:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       66:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       66:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       66:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       66:  576:    state->deckCount[player]--;
       66:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       66:  580:  return 0;
       67:  581:}
        -:  582:
function getCost called 7 returned 100% blocks executed 25%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        7:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 14%
branch  4 taken 14%
branch  5 taken 0%
branch  6 taken 43%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        7:  644:}
        -:  645:
        -:  646://Refactored card effects
function adventurerCard called 2 returned 100% blocks executed 100%
        -:  647:int adventurerCard(int currentPlayer, int temphand[], int z, struct gameState *state)
        -:  648:{
        -:  649: int cardDrawn;
        2:  650: int drawntreasure=0;
        -:  651: //bug allows the player to reveal cards from their deck until they reveal 3 treasure cards
       24:  652: while(drawntreasure<3){
branch  0 taken 83%
branch  1 taken 17%
       10:  653:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 10%
branch  1 taken 90%
        1:  654:	  shuffle(currentPlayer, state);
        1:  655:	}
       10:  656:	drawCard(currentPlayer, state);
       10:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  658:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 40%
branch  1 taken 60%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6:  659:	  drawntreasure++;
        6:  660:        }
        -:  661:	else{
        4:  662:	  temphand[z]=cardDrawn;
        4:  663:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  664:	  z++;
        -:  665:	}
        -:  666:      }
       12:  667:      while(z-1>=0){
branch  0 taken 67%
branch  1 taken 33%
        4:  668:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  669:	z=z-1;
        -:  670:      }
        2:  671:   return 0;
        -:  672:}
        -:  673:
function smithyCard called 1 returned 100% blocks executed 100%
        -:  674:int smithyCard(int currentPlayer, int handPos, struct gameState *state)
        -:  675:{
        -:  676: int i;
        -:  677://+3 Cards
        -:  678://bug allows the player to add 5 cards to their hand
       12:  679: for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  680: {
        5:  681: drawCard(currentPlayer, state);
        5:  682: }
        -:  683:
        1:  684: discardCard(handPos, currentPlayer, state, 0);
        1:  685: return 0;
        -:  686:}
        -:  687:
function council_roomCard called 2 returned 100% blocks executed 100%
        -:  688:int council_roomCard(int currentPlayer, int handPos, struct gameState *state)
        -:  689:{
        -:  690: //+4 Cards
        -:  691: //bugs draws 5 cards
        -:  692: int i;
       24:  693:       for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  694:       	{
       10:  695:       	 drawCard(currentPlayer, state);
       10:  696:        }
        -:  697: 		  				
        -:  698:        //+1 Buy
        2:  699:         state->numBuys++;  		  				            					            			      //Each other player draws a card 
       12:  700:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  701:        {
        4:  702:           if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  703:           {
        2:  704: 	     drawCard(i, state);		  				            			            		       }
        4:  705:        }     		  				            			            		  	    	      	    						  				            			            		  	    	      	    				      //put played card in played card pile
        2:  706: 	  				            			            		  	    	      	    				              discardCard(handPos, currentPlayer, state, 0);
        2:  707:	return 0;
        -:  708:}
        -:  709:
function villageCard called 0 returned 0% blocks executed 0%
        -:  710:int villageCard(int currentPlayer, int handPos, struct gameState *state)
        -:  711:{
        -:  712: //+1 Card
    #####:  713: drawCard(currentPlayer, state);
        -:  714:
        -:  715:  //+2 Actions
        -:  716:  // bug adds 4 to a player's action count, instead of only 2
    #####:  717:    state->numActions = state->numActions + 4;
        -:  718:  //discard played card from hand
    #####:  719:    discardCard(handPos, currentPlayer, state, 0);
    #####:  720:    return 0;
        -:  721:}
        -:  722:
function embargoCard called 0 returned 0% blocks executed 0%
        -:  723:int embargoCard(int currentPlayer, int handPos, int choice1, struct gameState *state)
        -:  724:{
        -:  725: //+2 Coins
    #####:  726:  state->coins = state->coins + 2;     			
        -:  727:  //see if selected pile is in play
    #####:  728:  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  729:  {
    #####:  730:   return 1;
        -:  731:  }
        -:  732:       			            		  		            //add embargo token to selected supply pile  		
    #####:  733:  state->embargoTokens[choice1]++;      			            		  	
        -:  734: //trash card
    #####:  735: discardCard(handPos, currentPlayer, state, 1);	
    #####:  736:}
        -:  737:
        -:  738:
function cardEffect called 7 returned 100% blocks executed 7%
        -:  739:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  740:{
        -:  741:  int i;
        -:  742:  int j;
        -:  743:  int k;
        -:  744:  int x;
        -:  745:  int index;
        7:  746:  int currentPlayer = whoseTurn(state);
        7:  747:  int nextPlayer = currentPlayer + 1;
        -:  748:
        7:  749:  int tributeRevealedCards[2] = {-1, -1};
        -:  750:  int temphand[MAX_HAND];// moved above the if statement
        7:  751:  int drawntreasure=0;
        -:  752:  int cardDrawn;
        7:  753:  int z = 0;// this is the counter for the temp hand
        7:  754:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 14%
branch  1 taken 86%
        1:  755:    nextPlayer = 0;
        1:  756:  }
        -:  757:  
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
        7:  760:  switch( card ) 
branch  0 taken 29%
branch  1 taken 29%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 29%
branch  6 taken 14%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  761:    {
        -:  762:    case adventurer:
        2:  763:      adventurerCard(currentPlayer, temphand, z, state);
        2:  764:      return 0;
        -:  765:			
        -:  766:    case council_room:
        2:  767:      council_roomCard(currentPlayer, handPos, state);		
        2:  768:      return 0;
        -:  769:			
        -:  770:    case feast:
        -:  771:      //gain card with cost up to 5
        -:  772:      //Backup hand
    #####:  773:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  774:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  775:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  776:      }
        -:  777:      //Backup hand
        -:  778:
        -:  779:      //Update Coins for Buy
    #####:  780:      updateCoins(currentPlayer, state, 5);
    #####:  781:      x = 1;//Condition to loop on
    #####:  782:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  783:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  784:	  if (DEBUG)
        -:  785:	    printf("None of that card left, sorry!\n");
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  789:	  }
    #####:  790:	}
    #####:  791:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  792:	  printf("That card is too expensive!\n");
        -:  793:
        -:  794:	  if (DEBUG){
        -:  795:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  796:	  }
    #####:  797:	}
        -:  798:	else{
        -:  799:
        -:  800:	  if (DEBUG){
        -:  801:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  802:	  }
        -:  803:
    #####:  804:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  805:	  x = 0;//No more buying cards
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:	  }
        -:  810:
        -:  811:	}
        -:  812:      }     
        -:  813:
        -:  814:      //Reset Hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  816:	state->hand[currentPlayer][i] = temphand[i];
    #####:  817:	temphand[i] = -1;
    #####:  818:      }
        -:  819:      //Reset Hand
        -:  820:      			
    #####:  821:      return 0;
        -:  822:			
        -:  823:    case gardens:
    #####:  824:      return -1;
        -:  825:			
        -:  826:    case mine:
    #####:  827:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  828:
    #####:  829:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  830:	{
    #####:  831:	  return -1;
        -:  832:	}
        -:  833:		
    #####:  834:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      gainCard(choice2, state, 2, currentPlayer);
        -:  845:
        -:  846:      //discard card from hand
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:
        -:  849:      //discard trashed card
    #####:  850:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  851:	{
    #####:  852:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  853:	    {
    #####:  854:	      discardCard(i, currentPlayer, state, 0);			
    #####:  855:	      break;
        -:  856:	    }
    #####:  857:	}
        -:  858:			
    #####:  859:      return 0;
        -:  860:			
        -:  861:    case remodel:
        2:  862:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
        2:  864:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 taken 0%
branch  1 taken 100%
        -:  865:	{
    #####:  866:	  return -1;
        -:  867:	}
        -:  868:
        2:  869:      gainCard(choice2, state, 0, currentPlayer);
        -:  870:
        -:  871:      //discard card from hand
        2:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:
        -:  874:      //discard trashed card
        6:  875:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  876:	{
        3:  877:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 67%
branch  1 taken 33%
        -:  878:	    {
        2:  879:	      discardCard(i, currentPlayer, state, 0);			
        2:  880:	      break;
        -:  881:	    }
        1:  882:	}
        -:  883:
        -:  884:
        2:  885:      return 0;
        -:  886:		
        -:  887:    case smithy:
        1:  888:      smithyCard(currentPlayer, handPos, state);
        1:  889:      return 0;
        -:  890:		
        -:  891:    case village:
    #####:  892:      villageCard(currentPlayer, handPos, state);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case baron:
    #####:  896:      state->numBuys++;//Increase buys by 1!
    #####:  897:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  898:	int p = 0;//Iterator for hand!
    #####:  899:	int card_not_discarded = 1;//Flag for discard set!
    #####:  900:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  901:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  902:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  903:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:	    state->discardCount[currentPlayer]++;
    #####:  905:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  906:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  907:	    }
    #####:  908:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:	    state->handCount[currentPlayer]--;
    #####:  910:	    card_not_discarded = 0;//Exit the loop
    #####:  911:	  }
    #####:  912:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  913:	    if(DEBUG) {
        -:  914:	      printf("No estate cards in your hand, invalid choice\n");
        -:  915:	      printf("Must gain an estate if there are any\n");
        -:  916:	    }
    #####:  917:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	      gainCard(estate, state, 0, currentPlayer);
    #####:  919:	      state->supplyCount[estate]--;//Decrement estates
    #####:  920:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  921:		isGameOver(state);
    #####:  922:	      }
    #####:  923:	    }
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
        -:  926:			    
        -:  927:	  else{
    #####:  928:	    p++;//Next card
        -:  929:	  }
        -:  930:	}
    #####:  931:      }
        -:  932:			    
        -:  933:      else{
    #####:  934:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  935:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  936:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  937:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	    isGameOver(state);
    #####:  939:	  }
    #####:  940:	}
        -:  941:      }
        -:  942:	    
        -:  943:      
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case great_hall:
        -:  947:      //+1 Card
    #####:  948:      drawCard(currentPlayer, state);
        -:  949:			
        -:  950:      //+1 Actions
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
    #####:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
    #####:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  998:			{
    #####:  999:			  drawCard(i, state);
    #####: 1000:			}
    #####: 1001:		    }
    #####: 1002:		}
    #####: 1003:	    }
        -: 1004:				
    #####: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
    #####: 1009:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
        -: 1011:	  //+2 cards
    #####: 1012:	  drawCard(currentPlayer, state);
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	}
    #####: 1015:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
        -: 1017:	  //+2 coins
    #####: 1018:	  state->coins = state->coins + 2;
    #####: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
    #####: 1023:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1024:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
    #####: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
    #####: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
    #####: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
    #####: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
    #####: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1076:	  state->coins += 2;
    #####: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
    #####: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1106:	    {
    #####: 1107:	      j++;
    #####: 1108:	    }
    #####: 1109:	}
    #####: 1110:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1127:	    }
    #####: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    #####: 1141:		  break;
        -: 1142:		}
    #####: 1143:	    }
    #####: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
    #####: 1171:		}
        -: 1172:					
    #####: 1173:	    }
        -: 1174:				
    #####: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
    #####: 1184:      embargoCard(currentPlayer, handPos, choice1, state);
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        7: 1253:}
        -: 1254:
function discardCard called 7 returned 100% blocks executed 90%
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
        7: 1259:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1260:    {
        -: 1261:      //add card to played pile
        7: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1263:      state->playedCardCount++;
        7: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
        7: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
        7: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 29%
branch  1 taken 71%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
        2: 1273:      state->handCount[currentPlayer]--;
        2: 1274:    }
        5: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
    #####: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
        5: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
        5: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
        5: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
        7: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 7 returned 100% blocks executed 100%
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1298:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 14%
branch  1 taken 86%
        -: 1299:    {
        1: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        6: 1308:  if (toFlag == 1)
branch  0 taken 17%
branch  1 taken 83%
        -: 1309:    {
        1: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1311:      state->deckCount[player]++;
        1: 1312:    }
        5: 1313:  else if (toFlag == 2)
branch  0 taken 20%
branch  1 taken 80%
        -: 1314:    {
        1: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1316:      state->handCount[player]++;
        1: 1317:    }
        -: 1318:  else
        -: 1319:    {
        4: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        6: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        6: 1327:  return 0;
        7: 1328:}
        -: 1329:
function updateCoins called 10 returned 100% blocks executed 100%
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       10: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
      120: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1339:    {
       50: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 66%
branch  1 taken 34%
        -: 1341:	{
       33: 1342:	  state->coins += 1;
       33: 1343:	}
       17: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 12%
branch  1 taken 88%
        -: 1345:	{
        2: 1346:	  state->coins += 2;
        2: 1347:	}
       15: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 13%
branch  1 taken 87%
        -: 1349:	{
        2: 1350:	  state->coins += 3;
        2: 1351:	}	
       50: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       10: 1355:  state->coins += bonus;
        -: 1356:
       10: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
